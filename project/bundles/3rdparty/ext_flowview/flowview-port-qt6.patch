diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8ab7ebe..491986b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,6 +14,8 @@ project(
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
+option(BUILD_WITH_QT6 "Build with Qt6, else Qt5" OFF)
+
 # Use common cmake macro from cmake/modules/ to install unistall plugins.
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")
 
diff --git a/bootstrap.sh b/bootstrap.sh
index 6f35025..7dc87d9 100755
--- a/bootstrap.sh
+++ b/bootstrap.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 
-# Copyright (c) 2008-2022, Gilles Caulier, <caulier dot gilles at gmail dot com>
+# Copyright (c) 2008-2023, Gilles Caulier, <caulier dot gilles at gmail dot com>
 #
 # Redistribution and use is allowed according to the terms of the BSD license.
 # For details see the accompanying COPYING-CMAKE-SCRIPTS file.
@@ -12,6 +12,7 @@ cd build
 cmake . \
       -DCMAKE_INSTALL_PREFIX=/usr \
       -DCMAKE_BUILD_TYPE=Debug \
+      -DBUILD_WITH_QT6=ON \
       -G"Unix Makefiles" \
       -Wno-dev \
       ..
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 738be67..0f063c4 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -4,16 +4,35 @@
 # Redistribution and use is allowed according to the terms of the BSD license.
 # For details see the accompanying COPYING-CMAKE-SCRIPTS file.
 
-set(CMAKE_CXX_STANDARD 20)
 set(CMAKE_AUTOMOC ON)
 
-# set QT_VERSION_MAJOR
-find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core)
+if(BUILD_WITH_QT6)
+
+    find_package(Qt6 "6.5.0" REQUIRED
+                 NO_MODULE COMPONENTS
+                 Core
+                 Widgets
+                 Gui
+                 Concurrent
+    )
+
+    set(QT_VERSION_MAJOR 6)
+
+else()
+
+    find_package(Qt5 "5.6.0" REQUIRED
+                 NO_MODULE COMPONENTS
+                 Core
+                 Widgets
+                 Gui
+                 Concurrent
+    )
+
+    set(QT_VERSION_MAJOR 5)
+
+endif()
+
 
-find_package(
-    Qt${QT_VERSION_MAJOR} NO_MODULE
-    COMPONENTS Core Widgets Gui
-    REQUIRED)
 find_package(DigikamCore CONFIG REQUIRED)
 
 set_package_properties(
@@ -26,9 +45,7 @@ include(FindThreads REQUIRED)
 # For i18n support...
 # include(i18nUtils)
 
-include_directories(
-    $<TARGET_PROPERTY:Digikam::digikamcore,INTERFACE_INCLUDE_DIRECTORIES>/digikam
-)
+include_directories($<TARGET_PROPERTY:Digikam::digikamcore,INTERFACE_INCLUDE_DIRECTORIES>)
 
 set(PicFlowView_generic_SRCS
     ${CMAKE_CURRENT_SOURCE_DIR}/plugflow.cpp
diff --git a/src/picdialog.cpp b/src/picdialog.cpp
index e5b6040..18e4788 100644
--- a/src/picdialog.cpp
+++ b/src/picdialog.cpp
@@ -23,13 +23,14 @@
 #include <QUrl>
 
 #include "aspectratiopixmaplabel.hpp"
-
-#define INSERT_CANCEL_POINT                   \
-    do {                                      \
-        if(stop_) {                           \
-            qDebug() << "Cancel load images"; \
-            return;                           \
-        }                                     \
+#include "digikam_debug.h"
+
+#define INSERT_CANCEL_POINT                                               \
+    do {                                                                  \
+        if(stop_) {                                                       \
+            qCDebug(DIGIKAM_DPLUGIN_GENERIC_LOG) << "Cancel load images"; \
+            return;                                                       \
+        }                                                                 \
     } while(0)
 
 #define POST_RESIZE_EVENT(obj) (qApp->postEvent(obj, new QResizeEvent(this->size(), this->size())))
@@ -95,7 +96,7 @@ void PicDialog::setStyle(Z::Style sty) {
 void PicDialog::add(LoadingDescription const& desc, DImg const& dimg) {
     qApp->processEvents();
     if(dimg.isNull()) {
-        qDebug() << "DImg " << desc.filePath << " load failed";
+        qCDebug(DIGIKAM_DPLUGIN_GENERIC_LOG) << "DImg " << desc.filePath << " load failed";
         return;
     }
     INSERT_CANCEL_POINT;
@@ -133,7 +134,7 @@ bool PicDialog::eventFilter(QObject* watched, QEvent* event) {
 
 void PicDialog::load(const QUrl& url, bool loadByPool) {
     INSERT_CANCEL_POINT;
-    qDebug() << "Load image: " << url.toLocalFile();
+    qCDebug(DIGIKAM_DPLUGIN_GENERIC_LOG) << "Load image: " << url.toLocalFile();
     if(!loadByPool) {
         if(!t_) {
             static PreviewLoadThread t;
@@ -161,7 +162,7 @@ void PicDialog::load(const QUrl& url, bool loadByPool) {
         imgReader.setAutoTransform(true);
         QPixmap pix = QPixmap::fromImage(imgReader.read());
         if(pix.isNull()) {
-            qDebug() << "Image " << url.toLocalFile() << " load failed";
+            qCDebug(DIGIKAM_DPLUGIN_GENERIC_LOG) << "Image " << url.toLocalFile() << " load failed";
             return;
         }
         INSERT_CANCEL_POINT;
diff --git a/src/plugflow.cpp b/src/plugflow.cpp
index 7fcb39e..7e18b7d 100644
--- a/src/plugflow.cpp
+++ b/src/plugflow.cpp
@@ -17,66 +17,17 @@
 #include <QInputDialog>
 #include <QMenu>
 
+#include "digikam_debug.h"
+
 #include "picdialog.hpp"
 #include "plugflow.hpp"
 #include "plugsettings.hpp"
 
 namespace Cathaysia {
 
-void logHandler(QtMsgType type, const QMessageLogContext& context, const QString& msg) {
-    QByteArray  localMsg = msg.toLocal8Bit();
-    const char* file     = context.file ? context.file : "";
-    const char* function = context.function ? context.function : "";
-
-    switch(type) {
-        case QtDebugMsg:
-            fprintf(stderr,
-                    "cathaysia.digikam.flowview(Debug): %s (%s:%u, %s)\n",
-                    localMsg.constData(),
-                    file,
-                    context.line,
-                    function);
-            break;
-        case QtInfoMsg:
-            fprintf(stderr,
-                    "cathaysia.digikam.flowview(Info): %s (%s:%u, %s)\n",
-                    localMsg.constData(),
-                    file,
-                    context.line,
-                    function);
-            break;
-        case QtWarningMsg:
-            fprintf(stderr,
-                    "cathaysia.digikam.flowview(Warning): %s (%s:%u, %s)\n",
-                    localMsg.constData(),
-                    file,
-                    context.line,
-                    function);
-            break;
-        case QtCriticalMsg:
-            fprintf(stderr,
-                    "cathaysia.digikam.flowview(Critical): %s (%s:%u, %s)\n",
-                    localMsg.constData(),
-                    file,
-                    context.line,
-                    function);
-            break;
-        case QtFatalMsg:
-            fprintf(stderr,
-                    "cathaysia.digikam.flowview(Fatal): %s (%s:%u, %s)\n",
-                    localMsg.constData(),
-                    file,
-                    context.line,
-                    function);
-            break;
-    }
-}
-
 FlowPlugin::FlowPlugin(QObject* const parent) : DPluginGeneric(parent), iface_(nullptr), settings_(nullptr) {
     settings_ = new PlugSettings(nullptr);
     settings_->setPlugin(this);
-
-    qInstallMessageHandler(logHandler);
 }
 
 FlowPlugin::~FlowPlugin() noexcept {
@@ -94,7 +45,6 @@ QString FlowPlugin::iid() const {
 
 QIcon FlowPlugin::icon() const {
     return QIcon::fromTheme(QLatin1String("digikam"));
-#include <functional>
 }
 
 QString FlowPlugin::description() const {
@@ -150,7 +100,7 @@ void FlowPlugin::flowView() {
     dialog->show();
 
     auto items = iface_->currentAlbumItems();
-    qDebug() << "These images will be loaded: " << items;
+    qCDebug(DIGIKAM_DPLUGIN_GENERIC_LOG) << "These images will be loaded: " << items;
     for(auto& it: items) dialog->load(it, settings_->useCustomLoader());
 }
 
diff --git a/extern/QtFlowLayout/CMakeLists.txt b/extern/QtFlowLayout/CMakeLists.txt
index bd47b6e..a7e3f6d 100755
--- a/extern/QtFlowLayout/CMakeLists.txt
+++ b/extern/QtFlowLayout/CMakeLists.txt
@@ -12,5 +12,5 @@ add_subdirectory(src)
 
 include(CTest)
 
-add_subdirectory(test)
+#add_subdirectory(test)
 
diff --git a/extern/QtFlowLayout/src/CMakeLists.txt b/extern/QtFlowLayout/src/CMakeLists.txt
index 6ddab73..9b480fc 100644
--- a/extern/QtFlowLayout/src/CMakeLists.txt
+++ b/extern/QtFlowLayout/src/CMakeLists.txt
@@ -5,6 +5,16 @@ add_library(
   flowlayout.hpp
 )
 
-find_package(Qt5 COMPONENTS Widgets REQUIRED)
-target_include_directories(FlowLayout PRIVATE Qt5::Widgets)
-target_link_libraries(FlowLayout PRIVATE Qt5::Widgets)
+if(BUILD_WITH_QT6)
+
+    find_package(Qt6 COMPONENTS Widgets REQUIRED)
+    target_include_directories(FlowLayout PRIVATE Qt6::Widgets)
+    target_link_libraries(FlowLayout PRIVATE Qt6::Widgets)
+
+else()
+
+    find_package(Qt5 COMPONENTS Widgets REQUIRED)
+    target_include_directories(FlowLayout PRIVATE Qt5::Widgets)
+    target_link_libraries(FlowLayout PRIVATE Qt5::Widgets)
+
+endif()
\ No newline at end of file
diff --git a/extern/QtFlowLayout/src/flowlayout.cpp b/extern/QtFlowLayout/src/flowlayout.cpp
index 73c67ed..fa2f7f6 100755
--- a/extern/QtFlowLayout/src/flowlayout.cpp
+++ b/extern/QtFlowLayout/src/flowlayout.cpp
@@ -82,7 +82,7 @@ void FlowLayout::doColLayout() {
     // n*(refwidth_+spacing) - spacing = this.width()
     int n = (this->geometry().width() + spacing()) / (refwidth_ + spacing());
     // n should always less than list_.length()
-    n = std::min(n, list_.length());
+    n = std::min(n, (int)list_.length());
     n = n == 0 ? 1 : n;
 
     qreal        realWidth = refwidth_ + (this->geometry().width() - n * refwidth_) / n;
@@ -107,7 +107,7 @@ void FlowLayout::doSquareLayout() {
     if(list_.length() <= 0) return;
     int n = (this->geometry().width() + spacing()) / (refwidth_ + spacing());
     // n should always less than list_.length()
-    n = std::min(n, list_.length());
+    n = std::min(n, (int)list_.length());
     n = n == 0 ? 1 : n;
 
     qreal realWidth = refwidth_ + (this->geometry().width() - n * refwidth_) / n;
diff --git a/extern/QtFlowLayout/src/flowlayout.hpp b/extern/QtFlowLayout/src/flowlayout.hpp
index d85576f..55a9a0d 100755
--- a/extern/QtFlowLayout/src/flowlayout.hpp
+++ b/extern/QtFlowLayout/src/flowlayout.hpp
@@ -35,7 +35,7 @@ struct Style final {
     }
 
     bool operator==(QString const& b) {
-        return this->state_ == (Style)b;
+        return this->state_ == Style(b).state_;
     }
 };
 
